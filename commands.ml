let commands=[(" We will prove the left hand side of @conc{} that is we need to prove @newconclusion{1}.@latex{1} We are done with @newconclusion{1} and so @conc{}.", " Tactic Notation \"Prove\" \"left\" \"hand\" \"side\" := left.");
(" We will prove the right hand side of @conc{} that is we need to prove @newconclusion{1}.@latex{1} We are done with @newconclusion{1} and so @conc{}.", " Tactic Notation \"Prove\" \"right\" \"hand\" \"side\" := right.");
(" We will prove @newconclusion{1}.@latex{1} We are done with @newconclusion{1} and so @conc{}.", " Tactic Notation \"Prove\" constr(a) \"in\" \"the\" \"disjuntion\" := match goal with |-(a \/ ?b) => left | |-(?a \/ a) => right end.");
("Since we know @deadhyp{} we also know @newhyp{1}.@latex{1} We are now done with @conc{}.", " Tactic Notation \"Eliminate\" \"the\" \"conjuction\" \"in\" \"hypothesis\" hyp(a) :=match goal with| [a : (_ /\ _) |- _] => (let H1:=fresh \"Hyp\" in let H2:= fresh \"Hyp\" in destruct a as [H1 H2]) end.");
("Since we know @deadhyp{} we also know @newhyp{1}.@latex{1} We are now done with @conc{}.", "Tactic Notation \"Consider\" \"cases\" \"based\" \"on\" \"disjunction\" \"in\" \"hypothesis\" hyp(a) :=match goal with| [a : (_ \/ _) |- _] => (let H1:=fresh \"Hyp\" in let H2:=fresh \"Hyp\" in destruct a as [H1 | H2] ) end.");
("In order to prove @conc{} will first prove @newconclusion{1} and then @newconclusion{2}.First we show @newconclusion{1}.@latex{1} Next we show @newconclusion{2}.@latex{2} Since we showed @newconclusion{1} and @newconclusion{2} we also have @conc{}.", " Tactic Notation \"Prove\" \"the\" \"conjunction\" \"in\" \"the\" \"goal\" \"by\" \"first\" \"proving\" constr(a) \"then\" constr(b) := match goal with |-(a /\ b) => split end.");
("We will assume @newhyp{1} and show @newconclusion{1}.@latex{1} We have now showed that if @newhyp{1} then @newconclusion{1} a proof of @conc{}.", " Tactic Notation \"Assume\" constr(a) \"then\" \"prove\" constr(b) := match goal with |-(a -> b) => let H:= fresh \"Hyp\" in intro H end.");
("In order to show @conc{} we first show @newconclusion{1} and then @newconclusion{2}.First show @newconclusion{1}.@latex{1} Next show @newconclusion{2}.@latex{2} Since we showed both directions of the implication we have @conc{}.", " Tactic Notation \"Prove\" \"both\" \"directions\" \"of \" constr(a) \"iff \" constr(b) := match goal with |-(a <-> b) => split end.");
("In order to show @conc{} we pick an arbitrary @val{1} and show @newconclusion{1}.@latex{1} Since @val{1} was arbitrary this shows @conc{}.", " Tactic Notation \"Fix\" \"an\" \"arbitrary\" \"element\" ident(a) := match goal with |- forall _, _ => intro a end.");
("We choose a variable @val{1} in @val{2} to obtain @newhyp{1}.@latex{1} and so we have proved @conc{}.", " Tactic Notation \"Fix\" ident(a) \"the\" \"existentially\" \"quantified\" \"variable\" \"in\" hyp(H) := match goal with | [H:exists _, _|- _] => destruct H as [a H] end.");
("We immediately show @newhyp{1} by specialising @deadhyp{}.@latex{1} This finishes @conc{}.", " Tactic Notation \"Obtain\" constr(c) \"using\" \"variable\" constr(a) \"in\" \"the\" \"universally\" \"quantified\" \"hypothesis\" hyp(b) :=match goal with |[b: forall _, _ |- _] => let H0:=fresh \"Hyp\" in assert (H0:c) by apply (b a) end.");
("We shall prove @conc{} by showing @newconclusion{1}.@latex{1} Now @newconclusion{1} means that @conc{}.", " Tactic Notation \"Prove\" \"the\" \"existential\" \"claim\" \"is\" \"true\" \"for\" constr(a) := match goal with [|- exists _, _ ] => exists a end.");
("We rewrite the goal using @val{1} to obtain @newconclusion{1}.@latex{1} We have now proved @newconclusion{1} and so @conc{} follows.", "Tactic Notation \"Rewrite\" \"the\" \"goal\" \"using\" constr(b) := try rewrite b || rewrite <- b || apply b.");
("This follows immediately from arithmetic.@latex{1} ", " Tactic Notation \"True\" \"by\" \"arithmetic\" \"properties\" := match goal with |[|-_=_] => ring end.");
(" We will rewrite in @val{2} using @val{3} to obtain @newhyp{1}.@latex{1} Therefore we have @conc{}.", "Tactic Notation \"Claim\" constr(a) \"by\" \"rewriting\" hyp(c) \"using\" constr(b) := assert a by ((try (rewrite b in c) || (rewrite <- b in c));assumption).");
("We first prove @newconclusion{1}.@latex{1} and therefore we have proved @newconclusion{1}.@latex{2}.", " Tactic Notation \"Claim\" constr(a) := assert a.");
(" We use the definition of @val{2} in @val{1} to obtain @newhyp{1} @latex{1} therefore we have @conc{}.", " Tactic Notation \"Rewrite\" \"hypothesis\" ident(b) \"using\" \"the\" \"definition\" \"of\" reference(a) := unfold a in b.");
("Prove by induction.The initial case is @newconclusion{1}.@latex{1} Now assume @newhyp{2} and prove new @conclusion{2}.@latex{2} this finishes the induction.", " Tactic Notation \"Apply\" \"induction\" \"on\" constr(a) := induction a.");
 ("Rewriting the definition of @val{1} in @conc{}, we now need to show @newconclusion{1}.@latex{1} Therefore we have showed @newconclusion{1} and so @conc{}.", " Tactic Notation \"Rewrite\" \"goal\" \"using\" \"the\" \"definition\" \"of\" reference(a) := unfold a .");
 ("Now @val{3} and @val{2} imply @newhyp{1}.@latex{1} and so @conc{}.", " Tactic Notation \"obtain\" constr(a) \"applying\" constr(b) \"to\" hyp(c) :=assert a by apply (b c).");
 ("Assume that @conc{} is false, that is @newhyp{1} and prove a contradiction.@latex{1}.The conclusion @conc{} follows by contractiction.", " Tactic Notation \"Prove\" \"by\" \"contradiction\" := match goal with| |- ?A => let H:= fresh \"Hyp\" in assert (A\/not A) as H by apply (classic A); destruct H;[ assumption | exfalso] end.");
("This follows trivially from reflexivity.", " Tactic Notation \"This\" \"follows\" \"from\" \"reflexivity\" := reflexivity.");
("This follows trivially from symmetry.", " Tactic Notation \"This\" \"follows\" \"from\" \"symmetry\" := symmetry.");
("Apply theorem @val{1} to get @newconclusion{1}.@latex{1}", " Tactic Notation \"Apply\" \"result\" constr(a) := apply a.");
("Now @conc{} follows trivially from the assumptions.", " Tactic Notation \"This\" \"follows\" \"from\" \"assumptions\" := assumption.");
("We denote @val{1} by @val{2}.@latex{1}.", " Tactic Notation \"Denote\" constr(a) \"by\" ident(b) := remember a as b.")];;
